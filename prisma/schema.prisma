// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Match {
  id            String   @id @default(cuid())
  date          DateTime
  location      String
  stadium       String
  homeTeamCode  String?  
  awayTeamCode  String?  
  stage         String
  code          String   @unique
  
  results       Result[]

  @@map("matches")
}

model Result {
  id            String   @id @default(cuid())
  matchId       String  
  userId        String
  homeTeamCode  String?  
  awayTeamCode  String?     
  homeTeamScore Int?     
  awayTeamScore Int?    
  winnerCode    String?  

  match         Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([matchId])
  @@index([userId])
  @@unique([matchId, userId])
  @@map("results")
}

// Necessary for Next auth
model Account {
  id                String   @id @default(cuid())
  userId            String   
  type              String
  provider          String
  providerAccountId String  
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? 
  image         String?

  accounts      Account[]
  sessions      Session[]
  results       Result[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("tokens")
}
